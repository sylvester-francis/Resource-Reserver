version: '3.8'

# Docker Compose configuration for using pre-built images from GitHub Container Registry
# This allows users to run the application without building images locally

services:
  # FastAPI Backend Service (from registry)
  backend:
    image: ghcr.io/sylvester-francis/resource-reserver/backend:latest
    container_name: resource-reserver-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:///./data/resource_reserver.db
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
    volumes:
      - backend_data:/app/data
      - backend_logs:/app/logs
    networks:
      - resource-reserver-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Express.js Frontend Service (from registry)
  frontend:
    image: ghcr.io/sylvester-francis/resource-reserver/frontend:latest
    container_name: resource-reserver-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - API_BASE_URL=http://backend:8000
      - PORT=3000
    volumes:
      - frontend_uploads:/app/uploads
    networks:
      - resource-reserver-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (Optional - for production)
  postgres:
    image: postgres:15-alpine
    container_name: resource-reserver-postgres
    environment:
      - POSTGRES_DB=resource_reserver
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - resource-reserver-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "5432:5432"
    profiles:
      - postgres

# Named volumes for data persistence
volumes:
  backend_data:
    driver: local
  backend_logs:
    driver: local
  frontend_uploads:
    driver: local
  postgres_data:
    driver: local

# Network for service communication
networks:
  resource-reserver-network:
    driver: bridge