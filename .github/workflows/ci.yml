name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff flake8 black isort mypy
        pip install -r requirements.txt

    - name: Run ruff (linting)
      run: |
        ruff check . --output-format=github

    - name: Run ruff (formatting check)
      run: |
        ruff format --check .

    - name: Run flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test database directory
      run: mkdir -p data

    - name: Run pytest with coverage
      run: |
        pytest --cov=app --cov=cli --cov-report=xml --cov-report=term-missing --verbose

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit (security linter)
      run: |
        bandit -r app/ cli/ -f json -o bandit-report.json
        bandit -r app/ cli/ --severity-level medium
      continue-on-error: true

    - name: Run safety (dependency vulnerability check)
      run: |
        safety check --json --output safety-report.json
        safety check --short-report
      continue-on-error: true

  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        tags: resource-reserver:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true

    - name: Test Docker image
      run: |
        # Start the container
        docker run -d --name test-container -p 8000:8000 resource-reserver:${{ github.sha }}
        
        # Wait for container to be ready
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Stop container
        docker stop test-container
        docker rm test-container

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start services with docker compose
      run: |
        docker compose up -d api
        sleep 15  # Wait for services to be ready

    - name: Run integration tests
      run: |
        # Test API endpoints
        curl -f http://localhost:8000/health
        curl -f http://localhost:8000/docs
        
        # Test CLI in Docker
        docker compose exec -T api python -m cli.main auth --help

    - name: Check logs
      if: failure()
      run: |
        docker compose logs api

    - name: Cleanup
      if: always()
      run: |
        docker compose down --volumes