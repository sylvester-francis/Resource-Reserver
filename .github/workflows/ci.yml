name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff flake8 black isort mypy
        pip install -r requirements.txt

    - name: Run ruff (linting)
      run: |
        ruff check . --output-format=github

    - name: Run ruff (formatting check)
      run: |
        ruff format --check .

    - name: Run flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

  frontend-quality:
    name: Frontend Quality & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Check frontend code quality
      run: |
        cd frontend
        npm run lint || echo "No lint script available"

    - name: Test frontend startup
      run: |
        cd frontend
        npm run test || echo "No test script available"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test database directory
      run: mkdir -p data

    - name: Run pytest with coverage
      run: |
        pytest --cov=app --cov=cli --cov-report=xml --cov-report=term-missing --verbose

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [lint, frontend-quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker services
      run: |
        docker compose build backend frontend

    - name: Test Docker services
      run: |
        # Start the services
        docker compose up -d backend frontend
        
        # Wait for services to be ready
        sleep 15
        
        # Test backend health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Test frontend service
        curl -f http://localhost:3000/login || exit 1
        
        # Stop services
        docker compose down

  publish:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: [lint, frontend-quality, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Debug publish conditions
      run: |
        echo "Branch: ${{ github.ref }}"
        echo "Event: ${{ github.event_name }}"
        echo "Should publish: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}"
        
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/resource-reserver-backend
        flavor: |
          latest=auto
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/resource-reserver-frontend
        flavor: |
          latest=auto
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create required directories
      run: |
        mkdir -p data
        chmod 755 data

    - name: Start services with docker compose
      run: |
        docker compose up -d backend
        sleep 15  # Wait for services to be ready

    - name: Run integration tests
      run: |
        # Test API endpoints
        curl -f http://localhost:8000/health
        curl -f http://localhost:8000/docs
        
        # Test CLI in Docker (create config dir first)
        docker compose exec -T backend mkdir -p /tmp/.reservation-cli
        docker compose exec -T backend python -m cli.main auth --help

    - name: Check logs
      if: failure()
      run: |
        docker compose logs backend

    - name: Cleanup
      if: always()
      run: |
        docker compose down --volumes